@page "/"
@using System.Security.Claims
@using QuotaApp.Models
@using QuotaApp.Services
@inject IQuotaService QuotaService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Veri Sorgulanıyor</PageTitle>

<h1>Veri Sorgulama Arayüzü</h1>
<p>Kalan sorgu haklarınızı aşağıda görebilirsiniz. Günlük 5, aylık 20 sorgu hakkınız bulunmaktadır.</p>

@if (isPageLoading)
{
    <p><em>Kullanım hakları yükleniyor...</em></p>
}
else if (usageInfo is not null)
{
    <div class="row mb-4">
        <div class="col-md-6">
            <strong>Günlük Hak: @usageInfo.DayUsed / 5</strong>
            <div class="progress" style="height: 20px;">
                <div class="progress-bar" role="progressbar" style="width: @(usageInfo.DayUsed * 20)%" aria-valuenow="@usageInfo.DayUsed" aria-valuemin="0" aria-valuemax="5"></div>
            </div>
        </div>
        <div class="col-md-6">
            <strong>Aylık Hak: @usageInfo.MonthUsed / 20</strong>
            <div class="progress" style="height: 20px;">
                <div class="progress-bar bg-success" role="progressbar" style="width: @(usageInfo.MonthUsed * 5)%" aria-valuenow="@usageInfo.MonthUsed" aria-valuemin="0" aria-valuemax="20"></div>
            </div>
        </div>
    </div>

    <EditForm Model="@searchRequest" OnValidSubmit="HandleSearchAsync" FormName="searchForm">
        <div class="input-group mb-3">
            <InputText @bind-Value="searchRequest.Term" class="form-control" placeholder="Aranacak kelimeyi girin..." />
            <button type="submit" class="btn btn-primary" disabled="@(isFormLoading || usageInfo.DayRemaining <= 0 || usageInfo.MonthRemaining <= 0)">
                @if (isFormLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Sorgulanıyor...</span>
                }
                else
                {
                    <span>Sorgula</span>
                }
            </button>
        </div>
    </EditForm>

    @if (usageInfo is not null && (usageInfo.DayRemaining <= 0 || usageInfo.MonthRemaining <= 0))
{
    <div class="alert alert-warning mt-3" role="alert">
        @if (usageInfo.DayRemaining <= 0)
        {
            <span>Günlük sorgu limitinize ulaştınız. Yarın tekrar deneyebilirsiniz.</span>
        }
        else
        {
            <span>Aylık sorgu limitinize ulaştınız. Gelecek ay tekrar deneyebilirsiniz.</span>
        }
    </div>
}

}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@if (searchResults.Count > 0)
{
    <div class="mt-4">
        <h4>Sorgu Sonuçları</h4>
        <ul class="list-group">
            @foreach (var item in searchResults)
            {
                <li class="list-group-item">@item</li>
            }
        </ul>
    </div>
}

@code {
    private SearchRequest searchRequest = new();
    private UsageInfo? usageInfo;
    private List<string> searchResults = new();
    private string? errorMessage;
    private bool isPageLoading = true;
    private bool isFormLoading = false;
    
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        if (string.IsNullOrEmpty(currentUserId))
        {
            errorMessage = "Kullanıcı bilgileri alınamadı. Lütfen giriş yaptığınızdan emin olun.";
        }
        else
        {
            try
            {
                usageInfo = await QuotaService.GetUsageAsync(currentUserId);
            }
            catch (Exception)
            {
                errorMessage = "Kullanım bilgileri yüklenirken bir hata oluştu.";
            }
        }
        isPageLoading = false;
    }

    private async Task HandleSearchAsync()
    {
        if (string.IsNullOrEmpty(currentUserId))
        {
            errorMessage = "Sorgu yapmak için giriş yapmalısınız.";
            return;
        }
        
        if (string.IsNullOrWhiteSpace(searchRequest.Term))
        {
            errorMessage = "Lütfen bir arama terimi girin.";
            return;
        }

        isFormLoading = true;
        errorMessage = null;
        searchResults.Clear();
        
        try
        {
            usageInfo = await QuotaService.TryConsumeAsync(currentUserId, searchRequest.Term);
            searchResults = new List<string> { $"'{searchRequest.Term}' için sonuç 1", $"'{searchRequest.Term}' için sonuç 2" };
        }
        catch (QuotaException ex) // Sadece bizim beklediğimiz limit hatasını yakala
        {
            errorMessage = ex.Message;
        }
        catch (Exception) // Diğer beklenmedik hatalar için
        {
            errorMessage = "Sorgulama sırasında beklenmedik bir hata oluştu.";
        }

        isFormLoading = false;
        searchRequest.Term = "";
    }
}